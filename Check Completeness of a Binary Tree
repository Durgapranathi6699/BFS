class Solution {
    public boolean isCompleteTree(TreeNode root) {
      Queue<TreeNode> q=new LinkedList<>();
      q.add(root);
      boolean flag=false;
      while(!q.isEmpty()){
          TreeNode t=q.poll();
          if(t==null)flag=true;
          else{
              q.add(t.left);
              q.add(t.right);
              if(flag){
                  return false;
              }
          }
      }
      return true;
    }
   
}


//DFS 
int noofnodes=count(root);
    return dfs(root,1,noofnodes);
    }
    int count(TreeNode root){
        if(root==null)return 0;
        return 1+count(root.left)+count(root.right);
    }
   boolean dfs(TreeNode root,int idx,int nodes){
       if(root==null)return true;
       if(idx>nodes){
           return false;
       }
       return dfs(root.left,2*idx,nodes) && dfs(root.right,2*idx+1,nodes);
   }
}
